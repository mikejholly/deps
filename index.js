#!/usr/bin/env node
// Generated by CoffeeScript 1.6.3
(function() {
  var argv, async, colors, data, fs, glob, optimist, prompt, puts, usage, _, _package;

  puts = console.log;

  glob = require("glob");

  colors = require("colors");

  fs = require("fs");

  prompt = require("prompt");

  async = require("async");

  _ = require("underscore");

  optimist = require("optimist");

  usage = "\nResets package.json dependencies using a pretty interactive process.\n\nUsage: packager [options]";

  argv = optimist.usage(usage)["default"]("m", "~")["default"]("c", 1).alias("c", "clear").alias("m", "modifier").alias("y", "yes").alias("h", "help").describe("c", "Wipe all dependencies and devDependencies (start from scratch).").describe("m", "Which npm version prefix to add.").describe("y", "Assumes you want to add all node_modules to package.json.").boolean("c").argv;

  if (argv.h) {
    optimist.showHelp();
    process.exit(0);
  }

  if (!fs.existsSync("node_modules")) {
    puts("No node_modules directory found!".red);
    process.exit(1);
  }

  if (!fs.existsSync("package.json")) {
    puts("No package.json file found! Please create one first.".red);
    process.exit(1);
  }

  prompt.start();

  data = fs.readFileSync("package.json", "utf-8");

  _package = JSON.parse(data);

  if (argv.clear) {
    _package.dependencies = {};
    _package.devDependencies = {};
  }

  glob("node_modules/*/package.json", function(err, files) {
    var file, i, input, json, keys, modules, prompts, write, _i, _len;
    prompts = [];
    modules = {};
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      data = fs.readFileSync(file, "utf-8");
      json = JSON.parse(data);
      modules[json.name] = json;
      prompts.push({
        name: json.name,
        description: "" + json.name + " [" + json.version + "]",
        "default": "y",
        required: true
      });
    }
    write = function(input, fn) {
      var name, orig, s;
      orig = _package.dependencies;
      for (name in input) {
        s = input[name];
        if (/^git/.exec(orig[name])) {
          _package.dependencies[name] = orig[name];
        } else if (s === "dev") {
          _package.devDependencies[name] = argv.modifier + modules[name].version;
        } else if (s === "y") {
          _package.dependencies[name] = argv.modifier + modules[name].version;
        } else {
          _package.dependencies[name] = s;
        }
      }
      puts("\nWriting out new package.json.".green);
      return fs.writeFile("package.json", JSON.stringify(_package, null, 2), fn);
    };
    if (argv.yes) {
      keys = Object.keys(modules);
      input = _.object(keys, (function() {
        var _j, _ref, _results;
        _results = [];
        for (i = _j = 0, _ref = keys.length; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
          _results.push("y");
        }
        return _results;
      })());
      return write(input, function(err) {
        if (!err) {
          return process.exit(0);
        }
      });
    } else {
      puts("\nWhich do you want to include in your package.json? Type y, n or dev (to add to devDependencies). Type explicit version number to override.\n");
      return prompt.get(prompts, function(err, input) {
        if (err) {
          puts("\n\nPrompt interrupted. Doing nothing.".yellow);
          process.exit(1);
        }
        return write(input, function(err) {
          if (!err) {
            return process.exit(0);
          }
        });
      });
    }
  });

}).call(this);
